# ================================================== #
# The detailed explanation of all Quark 0.1 features #
# ================================================== #

# Variable definintion
s = "Hello, world"      #StringType
n = 3.1415              #NumType
b = true                #BoolType


# Input and output
name = input "What's your name?"            #StringType input
put "Hello, "                               #Print without \n
out name                                    #Print with \n
age = numinput "How old are you?"           #NumType input
choco = boolinput "Do you like chocolate?"  #BoolType input


# Type conversion
convertedNum = tonum "31415"
convertedString = tostring false
convertedBool = tobool "true"


# if - elseif - else statement
# Possible operators: < > <= >= == != not
# Not implemented yet: and or (&& ||)
if (age < 6) do
  out "Sorry, but you aren't old enough to use the computer"
end elseif (age < 18) do
  out "You can use the computer"
end else do
  out "Welcome!"
end


# through loop
through 1...10 as i do    # <rangeStart>...<rangeEnd> as <variable>
  out i
end
out ""


# other useful features
milestone         # dumps the memory and AST in console
breakpoint        # milestone, but with pausing
destroy variable  # remove variable from memory
# string .. str   # concatenation


# The try - catch construction
# try do
#   here some code
# end catch as variable do
#   some code
# end




# ================================================= #
# The detailed explanation of all Quark 0.2 changes #
# ================================================= #

# Empty variables creation
string var 
num number
bool boolean


# String changes
# string::pos - get char at pos     # len string    is deprecated. It'll be deleted in v0.4
# len string - get length of string # string::pos   is deprecated. It'll be deleted in v0.4


# Loop utilities
# break, continue


# Functions
func repeat(msg, count) does
  string data
  through 1...count as i do
    data = data .. msg
  end
  return data
end

out repeat(repeat("a", 3), 3)


# Other changes
# assert expression - raises an exception
# block var - prevents modifications to variable. Cannot be undone (yet).
# null - VoidType. Finalized variable.


# RuntimeWrapper changes
# - Now stacktrace contains line number.




# ================================================= #
# The detailed explanation of all Quark 0.3 changes #
# ================================================= #

# String utils
s1 = "abc".reverse
s2 = "abc".upper
s3 = "ABC".lower
s4 = "abc".length             # len string    is deprecated. It'll be deleted in v0.4
s5 = "aaabbbccc".sub(3, 6)
s6 = "aaabbbccc".sub(3)
s7 = "aaabbbccc".at(8)        # string::pos   is deprecated. It'll be deleted in v0.4
s8 = "abc".reverse.upper      # You can even stack them


# Number utils
n1 = 1.1.ceil
n2 = 1.5.round
n3 = 1.4.floor


# Memory instruction. Dumps all memory contents
memory


# While loop
# while (condition) do
#   code
# end


# LoopUntil
# loop
#   code
# stop when (condition)


# Other
# throw "exception"   # throws an exception
# notnull value       # value is not null?


# RuntimeWrapper changes
# - Now you can run Quark like this:
#    java -jar Quark.jar "/home/tapeline/test.q" true
#    java -jar Quark.jar "path" debug




# ================================================= #
# The detailed explanation of all Quark 0.4 changes #
# ================================================= #

# Lists
# list l   or   l = []
l = []
l.append(1)         # aliases:  .add() .push()
l.append(true)
l.remove(0)         # alias:  .drop()
l.append(false)
out l
out l.reverse
out l.len
# Also supports .sub(), .at()
#
# .over(value, pos) (.overlap(value, pos)) - Set list[pos] to value


# Import
# f = import "full/path/to/file.q"
# f will contain value, that full/path/to/file.q has returned
# E.g.: full/path/to/file.q:
# func sayhi(name) does
#   out "Hi, " .. name
# end
# return sayhi
#
# main.q:
# f = import "full/path/to/file.q" # - f now contains sayhi function
# f("Mark") # Will output Hi, Mark


# ._runner(args...)
# Quark doesn't have syntax like this hi()(), # hi return a function, and then we call it (second parentheses)
# but now there is ._runner() function. It calls his function with provided args.
# Example hi()._runner() # hi return a function, and then we call it
#
# There is also a short version (may be buggy, all responsibility is on you)
# .(args...)
# if you want to cast only one argument, you can use .arg
# e.g.   hi.("Hi")   but you cast only one argument, so you can shorten this more -   hi."Hi"
# Notice! in 0.5 there will be containers, and something like OOP, so you can't use syntax like this   hi.a
# or maybe even like this .(a, b...)
# So it's recommended to use full version


# every loop # python equivalent - for i in [lolz, lolz, alotoflolz]
# every variable in list|string do 
#   code
# end


# File management
# file_exists "path" - check if file exists
# file_new "path" - creates a new empty file
# file_read "path" - returns string value read from file
# file_write ("path", "content")  - rewrites a whole file
# file_append ("path", "content") - adds content to the end of file
# Notice! Don't forget to put whitespace between file_write|file_append and ()!
# It's a bug, but I'll fix this in future.


# nothing - just like `pass` in python - does nothing


# Other changes
# - q0.4-alpha fearuting Conscious Exception Catcher (TM). Jokes aside, now try-catch works normally
# - There is no support for \ character, so if you want a double quote (") in string, write &q;
# - len string and string::pos is deleted
# - added string.split(delimiter) method
